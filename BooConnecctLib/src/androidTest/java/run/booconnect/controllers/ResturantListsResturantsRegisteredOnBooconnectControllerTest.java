/*
 * BooConnecctLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package run.booconnect.controllers;

import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;
import android.test.suitebuilder.annotation.LargeTest;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import run.booconnect.exceptions.*;
import run.booconnect.APIHelper;
import run.booconnect.Configuration;
import run.booconnect.testing.TestHelper;
import run.booconnect.controllers.ResturantListsResturantsRegisteredOnBooconnectController;
import run.booconnect.controllers.syncwrapper.APICallBackCatcher;

import com.fasterxml.jackson.core.type.TypeReference;

@RunWith(AndroidJUnit4.class)
@LargeTest
public class ResturantListsResturantsRegisteredOnBooconnectControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ResturantListsResturantsRegisteredOnBooconnectController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        Configuration.initialize(InstrumentationRegistry.getContext());
        controller = getClient().getResturantListsResturantsRegisteredOnBooconnect();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Todo Add description for test testStoreANewlyCreatedResourceInStorage
     * @throws Throwable
     */
    @Test
    public void testStoreANewlyCreatedResourceInStorage() throws Throwable {

        // Set callback and perform API call
        APICallBackCatcher<Object> response = new APICallBackCatcher<Object>();
        controller.setHttpCallBack(httpResponse);
        controller.createStoreANewlyCreatedResourceInStorageAsync(response);
        response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Todo Add description for test testShowTheFormForCreatingANewResource
     * @throws Throwable
     */
    @Test
    public void testShowTheFormForCreatingANewResource() throws Throwable {

        // Set callback and perform API call
        APICallBackCatcher<Object> response = new APICallBackCatcher<Object>();
        controller.setHttpCallBack(httpResponse);
        controller.getShowTheFormForCreatingANewResourceAsync(response);
        response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Todo Add description for test testDisplayAListingOfTheResource
     * @throws Throwable
     */
    @Test
    public void testDisplayAListingOfTheResource() throws Throwable {

        // Set callback and perform API call
        APICallBackCatcher<Object> response = new APICallBackCatcher<Object>();
        controller.setHttpCallBack(httpResponse);
        controller.getDisplayAListingOfTheResourceAsync(response);
        response.getResult();

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
